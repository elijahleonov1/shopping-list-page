{"version":3,"sources":["serviceWorker.js","store/tasks/reducer.js","store/tasks/actionType.js","store/reducers.js","components/MainHeader/MainHeader.js","components/ItemList/ItemsList.js","components/AddNewTaskModal/AddNewTaskModal.js","store/tasks/action.js","page/App.js","page/Root.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","id","name","tasks","state","actions","type","addNewTask","payload","data","map","lenght","getTask","combineReducers","MainHeader","addTask","useState","isOpneSubMenu","setIsOpneSubMenu","toogleSubMenu","left","onClick","aside","style","transform","opened","onClose","Wrapper","styled","div","ItemName","RightIcons","ItemIcon","ItemsList","itemHabits","itemsList","item","key","before","AddNewTaskModal","activeModal","closeModal","saveTask","selectRepeat","closeSelectRepeat","selectRepeatData","title","isActive","selectRepeatConteant","setSelectRepeatConteant","nameTask","setNameTask","header","right","placeholder","value","onChange","e","currentTarget","top","defaultChecked","t","checkedSelectOpt","dispatch","a","deleteTask","connect","taskData","selectTask","taskActions","activePanel","setActiveModal","handlerCloseModal","useEffect","bridge","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","modal","store","createStore","rootReducers","applyMiddleware","thunk","Root","send","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0627708f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_NEW_TASK, DELETE_TASK } from './actionType';\r\n\r\nconst initialState = [\r\n    { id: 0, name: 'Привычка №1' },\r\n    { id: 2, name: 'Привычка №2' },\r\n    { id: 3, name: 'Привычка №3' },\r\n    { id: 4, name: 'Привычка №4' },\r\n];\r\n\r\nexport default function tasks(state = initialState, actions = {}) {\r\n    switch (actions.type) {\r\n        case ADD_NEW_TASK:\r\n            return addNewTask(state, actions.payload);\r\n            break;\r\n        case DELETE_TASK:\r\n            return state;\r\n            break;\r\n        default:\r\n            return state;\r\n            break;\r\n    }\r\n}\r\n\r\nfunction addNewTask(state, data) {\r\n    const r = state.map(({ id }) => id === data.id);\r\n    if (!r.lenght) {\r\n        return [...state, data];\r\n    }\r\n    return state;\r\n}\r\n\r\nexport const getTask = (state) => state.tasks;\r\n","export const ADD_NEW_TASK = 'ADD_NEW_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\n","import { combineReducers } from 'redux';\r\nimport tasks, * as selectTask from './tasks/reducer';\r\n\r\nexport default combineReducers({ tasks });\r\n\r\nexport { selectTask };\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    PanelHeader,\r\n    PanelHeaderSubmit,\r\n    PanelHeaderContent,\r\n    PanelHeaderContext,\r\n    Div,\r\n    List,\r\n    Cell,\r\n} from '@vkontakte/vkui';\r\nimport Icon24Dropdown from '@vkontakte/icons/dist/24/dropdown';\r\nimport Icon28AddOutline from '@vkontakte/icons/dist/28/add_outline';\r\n\r\nconst MainHeader = ({ addTask }) => {\r\n    const [isOpneSubMenu, setIsOpneSubMenu] = useState(false);\r\n    const toogleSubMenu = () => setIsOpneSubMenu(!isOpneSubMenu);\r\n    return (\r\n        <>\r\n            <PanelHeader\r\n                left={\r\n                    <PanelHeaderSubmit onClick={addTask}>\r\n                        <Div>\r\n                            <Icon28AddOutline />\r\n                        </Div>\r\n                    </PanelHeaderSubmit>\r\n                }\r\n            >\r\n                <PanelHeaderContent\r\n                    aside={\r\n                        <Div>\r\n                            <Icon24Dropdown\r\n                                style={{\r\n                                    transform: `rotate(${\r\n                                        isOpneSubMenu ? '180deg' : '0'\r\n                                    })`,\r\n                                }}\r\n                            />\r\n                        </Div>\r\n                    }\r\n                    onClick={toogleSubMenu}\r\n                >\r\n                    Трекер привычек\r\n                </PanelHeaderContent>\r\n            </PanelHeader>\r\n            <PanelHeaderContext opened={isOpneSubMenu} onClose={toogleSubMenu}>\r\n                <List>\r\n                    <Cell>О приложении</Cell>\r\n                </List>\r\n            </PanelHeaderContext>\r\n        </>\r\n    );\r\n};\r\n\r\nMainHeader.propTypes = {\r\n    addTask: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MainHeader;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nimport { Group, CellButton, Cell, Div } from '@vkontakte/vkui';\r\nimport Icon24DoneOutline from '@vkontakte/icons/dist/24/done_outline';\r\nimport Icon24Cancel from '@vkontakte/icons/dist/24/cancel';\r\nimport Icon24MoreVertical from '@vkontakte/icons/dist/24/more_vertical';\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: flex-start;\r\n`;\r\n\r\nconst ItemName = styled.div`\r\n    display: flex;\r\n    width: 50%;\r\n    max-height: 70px;\r\n\r\n    overflow: hidden;\r\n    white-space: break-spaces;\r\n    text-overflow: ellipsis;\r\n`;\r\n\r\nconst RightIcons = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    width: 50%;\r\n`;\r\n\r\nconst ItemIcon = styled.div`\r\n    width: 50px;\r\n`;\r\n\r\nconst ItemsList = ({ itemHabits = [] }) => {\r\n    const itemsList = itemHabits.map((item, key) => (\r\n        <Cell key={key} before={<Icon24MoreVertical />}>\r\n            <Wrapper>\r\n                <ItemName>{item.name}</ItemName>\r\n\r\n                <RightIcons>\r\n                    <ItemIcon>\r\n                        <Icon24DoneOutline />\r\n                    </ItemIcon>\r\n                    <ItemIcon>\r\n                        <Icon24DoneOutline />\r\n                    </ItemIcon>\r\n                    <ItemIcon>\r\n                        <Icon24Cancel />\r\n                    </ItemIcon>\r\n                    <ItemIcon>\r\n                        <Icon24Cancel />\r\n                    </ItemIcon>\r\n                </RightIcons>\r\n            </Wrapper>\r\n        </Cell>\r\n    ));\r\n\r\n    return <Group>{itemsList}</Group>;\r\n};\r\n\r\nItemsList.propTypes = {\r\n    itemHabits: PropTypes.array,\r\n};\r\n\r\nexport default ItemsList;\r\n","import React, { useState } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n    ModalRoot,\r\n    ModalPage,\r\n    ModalPageHeader,\r\n    FormLayout,\r\n    PanelHeaderButton,\r\n    FormLayoutGroup,\r\n    Input,\r\n    SelectMimicry,\r\n    Radio,\r\n} from '@vkontakte/vkui';\r\n\r\nconst Wrapper = styled.div`\r\n    height: 200px;\r\n`;\r\n\r\nconst AddNewTaskModal = ({\r\n    activeModal,\r\n    closeModal,\r\n    saveTask,\r\n    selectRepeat,\r\n    closeSelectRepeat,\r\n}) => {\r\n    const selectRepeatData = [\r\n        { id: 1, title: 'Каждый день', isActive: true },\r\n        { id: 2, title: 'Каждую неделю', isActive: false },\r\n        { id: 3, title: '2 раза в неделю', isActive: false },\r\n        { id: 4, title: '5 раза в неделю', isActive: false },\r\n    ];\r\n\r\n    const [selectRepeatConteant, setSelectRepeatConteant] = useState(\r\n        selectRepeatData\r\n    );\r\n\r\n    const [nameTask, setNameTask] = useState('');\r\n\r\n    const handlerSaveTask = () => {\r\n        saveTask({\r\n            id: 0,\r\n            name: nameTask,\r\n        });\r\n        setNameTask('');\r\n    };\r\n\r\n    const checkedSelectOpt = (id) => {\r\n        const t = selectRepeatData.map((item) => ({\r\n            ...item,\r\n            isActive: id === item.id,\r\n        }));\r\n        setSelectRepeatConteant(t);\r\n    };\r\n\r\n    return (\r\n        <ModalRoot activeModal={activeModal} onClose={closeModal}>\r\n            <ModalPage\r\n                id=\"addTask\"\r\n                onClose={closeModal}\r\n                header={\r\n                    <ModalPageHeader\r\n                        right={\r\n                            <PanelHeaderButton onClick={handlerSaveTask}>\r\n                                Готово\r\n                            </PanelHeaderButton>\r\n                        }\r\n                    >\r\n                        Добавить привычку\r\n                    </ModalPageHeader>\r\n                }\r\n            >\r\n                <FormLayout>\r\n                    <FormLayoutGroup>\r\n                        <Input\r\n                            placeholder=\"Название\"\r\n                            value={nameTask}\r\n                            onChange={(e) => setNameTask(e.currentTarget.value)}\r\n                        />\r\n                        <SelectMimicry top=\"Повторять\" onClick={selectRepeat}>\r\n                            Каждый день\r\n                        </SelectMimicry>\r\n                    </FormLayoutGroup>\r\n                </FormLayout>\r\n                <Wrapper />\r\n            </ModalPage>\r\n            <ModalPage\r\n                id=\"selectRepeat\"\r\n                onClose={closeSelectRepeat}\r\n                header={\r\n                    <ModalPageHeader\r\n                        right={\r\n                            <PanelHeaderButton onClick={closeSelectRepeat}>\r\n                                Готово\r\n                            </PanelHeaderButton>\r\n                        }\r\n                    >\r\n                        Повторять\r\n                    </ModalPageHeader>\r\n                }\r\n            >\r\n                <FormLayoutGroup>\r\n                    {selectRepeatConteant.map(({ id, title, isActive }) => {\r\n                        return (\r\n                            <Radio\r\n                                key={id}\r\n                                name=\"country\"\r\n                                value={id}\r\n                                defaultChecked={isActive}\r\n                                onClick={() => checkedSelectOpt(id)}\r\n                            >\r\n                                {title}\r\n                            </Radio>\r\n                        );\r\n                    })}\r\n                </FormLayoutGroup>\r\n                <Wrapper />\r\n            </ModalPage>\r\n        </ModalRoot>\r\n    );\r\n};\r\n\r\nAddNewTaskModal.propTypes = {\r\n    activeModal: PropTypes.string,\r\n    closeModal: PropTypes.func,\r\n    saveTask: PropTypes.func,\r\n    selectRepeat: PropTypes.func,\r\n    closeSelectRepeat: PropTypes.func,\r\n};\r\n\r\nexport default AddNewTaskModal;\r\n","import { ADD_NEW_TASK, DELETE_TASK } from './actionType';\r\n\r\nexport const addTask = (data) => async (dispatch) => {\r\n    dispatch({ type: ADD_NEW_TASK, payload: data });\r\n};\r\n\r\nexport const deleteTask = (data) => async (dispatch) => {\r\n    dispatch({ type: DELETE_TASK });\r\n};\r\n","import { View, Panel } from '@vkontakte/vkui';\nimport bridge from '@vkontakte/vk-bridge';\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport MainHeader from './../components/MainHeader';\nimport ItemsList from './../components/ItemList/ItemsList';\nimport AddNewTaskModal from './../components/AddNewTaskModal';\n\nimport { selectTask } from './../store/reducers';\nimport { taskActions } from './../store/actions';\n\nconst useScheme = () => {\n    useEffect(() => {\n        bridge.subscribe(({ detail: { type, data } }) => {\n            if (type === 'VKWebAppUpdateConfig') {\n                const schemeAttribute = document.createAttribute('scheme');\n                schemeAttribute.value = data.scheme\n                    ? data.scheme\n                    : 'client_light';\n                document.body.attributes.setNamedItem(schemeAttribute);\n            }\n        });\n    }, []);\n};\n\nconst App = ({ taskData, addNewTask }) => {\n    const [activePanel, setActivePanel] = useState('main');\n    const [activeModal, setActiveModal] = useState(null);\n\n    const go = (e) => setActivePanel(e.currentTarget.dataset.to);\n\n    const handlerAddTask = () => setActiveModal('addTask');\n    const handlerCloseModal = () => setActiveModal(null);\n    const handlerSelectRepeat = () => setActiveModal('selectRepeat');\n    const handlerCloseSelectRepeat = () => setActiveModal('addTask');\n    const handlerSaveTask = (data) => {\n        addNewTask(data);\n        handlerCloseModal();\n    };\n\n    useScheme();\n\n    return (\n        <View\n            activePanel={activePanel}\n            modal={\n                <AddNewTaskModal\n                    activeModal={activeModal}\n                    closeModal={handlerCloseModal}\n                    saveTask={handlerSaveTask}\n                    selectRepeat={handlerSelectRepeat}\n                    closeSelectRepeat={handlerCloseSelectRepeat}\n                />\n            }\n        >\n            <Panel id=\"main\">\n                <MainHeader addTask={handlerAddTask} />\n                <ItemsList itemHabits={taskData} />\n            </Panel>\n        </View>\n    );\n};\n\nconst mapStatetoProps = (state) => ({\n    taskData: selectTask.getTask(state),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addNewTask: (data) => dispatch(taskActions.addTask(data)),\n    };\n};\nexport default connect(mapStatetoProps, mapDispatchToProps)(App);\n","import React from 'react';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducers from '../store/reducers';\r\n\r\nimport App from './App';\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunk));\r\n\r\nconst Root = () => (\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n);\r\n\r\nexport default Root;\r\n","import '@vkontakte/vkui/dist/vkui.css';\nimport bridge from '@vkontakte/vk-bridge';\n\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Root from './page/Root';\n\nbridge.send('VKWebAppInit');\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}